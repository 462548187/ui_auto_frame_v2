Index: readme.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>### ui_auto_frame框架解释:使用pytest+selenium+allure\r\n\r\n---\r\n\r\n**Base模块封装操作元素的公共方法**\r\n**Check_config_script模块存放环境检查的脚本**\r\n**Common模块是封装的读取配置文件的公共方法，类似于util工具类**\r\n**Conf模块是存放全局配置文件**\r\n**Grid_server模块存放selenium-server（hub和node）启动bat脚本，以及三种selenium三种浏览器命令行参数的入口**\r\n**Logs模块，用于生成日志文件**\r\n**PageObject模块提取页面对象封装公共操作方法**\r\n**Report模块，存放测试报告，以及测试报告的生成模板allure**\r\n**TestCases模块，用于存放测试case**\r\n\r\n---\r\n\r\n**整个框架主要分为三层，Base层、PageObject层、TestCase层，采用传统的互联网的垂直架构模式。**\r\n**元素公共操作方法封装存放在Base层**\r\n**页面元素操作存放在第二层PageObject层，后面如果页面元素变化，直接在第二层相应的Page对象修改即可**\r\n**测试case存放在TestCases层，主要做断言等操作**\r\n\r\n---\r\n\r\n**安装所需要的包，使用pycharm导入项目，打开pycharm的terminal，只要到 requirements.txt 所在的目录下，使用如下命令 ，就能在当前的 python 环境中导入所有需要的包：**\r\n`pip install -r requirements.txt`\r\n\r\n---\r\n**环境说明：**\r\n**开发工具：pycharm**\r\n**python版本：python3.8**\r\n**测试case总入口：run.py**\r\n**浏览器：Chrome**\r\n**webdriver请选择对应Chrome版本的driver，并且放入python的安装目录中**\r\n\r\n---\r\n\r\n**有任何使用问题请联系我**\r\n\r\n---\r\n\r\n**selenium本地分布式启动配置：**\r\n*1、配置JDK环境1.8，使用javac 检查java环境是否配置完成*\r\n*2、下载selenium-server-standalone，下载地址：http://selenium-release.storage.googleapis.com/index.html，需要对应自己本地的selenium版本*\r\n*3、下载对应的浏览器的driver，放置到python的安装目录(chrome：https://sites.google.com/a/chromium.org/chromedriver/downloads、firefox：https://github.com/mozilla/geckodriver/releases、ie：http://selenium-release.storage.googleapis.com/index.html?path=3.5/)*\r\n*4、启动hub节点（管理节点负责任务的分发，数据收集统计）java -jar selenium-server-standalone-3.5.0.jar -role hub（ps:端口可以修改）*\r\n*5、启动node节点java -jar selenium-server-standalone-3.5.0.jar -role node -port 5555 -hub http://localhost:4444/grid/register（ps:端口可以修改，需要启用多少个node节点，只需要修改port即可）*\r\n*6、测试代码：test_mul_node.py，当三个浏览器都打开，说明环境配置没问题*\r\n\r\n\r\n\r\n---\r\n\r\n**本地启动分布式调试方法**\r\n\r\n1、执行start_server.bat，启动hub与node，使用浏览器登录127.0.0.1:4444，点击console看到，三个node的节点信息，表示分布式服务启动成功\r\n\r\n2、执行start_run_all_browser，启动三种浏览器执行脚本模式（IE需要进行浏览器设置，否则会执行失败）\r\n\r\n---\r\n\r\n**docker启动分布式调试方法**\r\n\r\n一、拉取selenium的docker镜像\r\n\r\n~~~ 镜像拉取\r\ndocker pull selenium/hub\r\ndocker pull selenium/node-firefox\r\ndocker pull selenium/node-chrome\r\n~~~\r\n\r\n二、检查镜像是否拉取成功\r\n\r\n~~~ 检查镜像\r\ndocker images | grep selenium\r\n~~~\r\n\r\n三、启动docker镜像\r\n\r\n~~~ 启动docker镜像\r\ndocker run -p 5555:4444 -d --name hub selenium/hub\r\ndocker run -P -d --link hub:hub --name firefox selenimu/node-firefox\r\ndocker run -P -d --link hub:hub --name chrome selenimu/node-chrome\r\n~~~\r\n\r\n四、检查是否启动成功\r\n\r\n使用docker环境宿主机的IP+映射的端口进行访问，查看console，查看与hub节点建立连接的node节点的IP和端口等信息是否正确\r\n\r\n五、调试模式（可选）\r\n\r\n1、server+browser调试模式：使用服务端和node集成在一起的镜像\r\n\r\n~~~ 镜像\r\ndocker pull selenium/standalone-chrome-debug\r\ndocker pull selenium/standalone-firefox-debug\r\n~~~\r\n\r\n2、server+node(browser)调试模式，使用hub+node的方式，镜像使用debug级别日志\r\n\r\n~~~ 镜像\r\ndocker pull selenium/standalone-chrome-debug\r\ndocker pull selenium/standalone-firefox-debug\r\n~~~\r\n\r\n~~~ 建立容器链接\r\ndocker run -d -p 5900:5900 --link hub:hub selenium/node-chrome-debug\r\n~~~\r\n\r\n查看Linux下浏览器运行的图形界面\r\n\r\n使用vnc viewer，下载地址：`https://www.realvnc.com/en/connect/download/viewer/windows/`\r\n\r\n输入docker所在环境的宿主机IP+映射的端口（5900）进行连接，默认密码：secret
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>GBK
===================================================================
--- readme.md	(revision bd329c8118a62f87825f45092b2678e9b2b4eba5)
+++ readme.md	(date 1591006591778)
@@ -1,4 +1,4 @@
-### ui_auto_frame框架解释:使用pytest+selenium+allure
+### ui_auto_frame框架解释:pytest+selenium+allure
 
 ---
 
@@ -58,7 +58,7 @@
 
 ---
 
-**docker启动分布式调试方法**
+**docker手动启动分布式调试方法**
 
 一、拉取selenium的docker镜像
 
@@ -86,16 +86,18 @@
 
 使用docker环境宿主机的IP+映射的端口进行访问，查看console，查看与hub节点建立连接的node节点的IP和端口等信息是否正确
 
-五、调试模式（可选）
+五、远程docker环境下调试模式环境配置，两种方式（可选）
 
-1、server+browser调试模式：使用服务端和node集成在一起的镜像
+1、手动
+
+- server+browser调试模式：使用服务端和node集成在一起的镜像
 
 ~~~ 镜像
 docker pull selenium/standalone-chrome-debug
 docker pull selenium/standalone-firefox-debug
 ~~~
 
-2、server+node(browser)调试模式，使用hub+node的方式，镜像使用debug级别日志
+- server+node(browser)调试模式，使用hub+node的方式，镜像使用debug级别日志
 
 ~~~ 镜像
 docker pull selenium/standalone-chrome-debug
@@ -106,8 +108,62 @@
 docker run -d -p 5900:5900 --link hub:hub selenium/node-chrome-debug
 ~~~
 
-查看Linux下浏览器运行的图形界面
+2、脚本启动
+
+- 可以执行start_server_docker.py脚本直接创建docker服务，脚本会自动检查docker镜像仓库是否含有所需镜像，自动拉取，自动创建所需容器，以前创建的含有selenium名字的镜像会被删除
+
+查看Linux下浏览器运行的浏览器界面
 
 使用vnc viewer，下载地址：`https://www.realvnc.com/en/connect/download/viewer/windows/`
 
-输入docker所在环境的宿主机IP+映射的端口（5900）进行连接，默认密码：secret
\ No newline at end of file
+输入docker所在环境的宿主机IP+映射的端口（5900）进行连接，默认密码：secret
+
+六、本地调试/分布式调试/远程分布式调试等操作
+
+本地调试：
+
+- 全局配置conftest.py文件中启用function_driver方法，在TestCases的每个子功能页面模块进行启用driver传参时，使用function_driver方法
+
+~~~ python
+import pytest
+from PageObject.login_page import Login_page
+
+@pytest.fixture(scope="function")
+def login_page_class_load(function_driver):
+    login_page = Login_page(function_driver)
+    yield login_page
+
+~~~
+
+
+
+本地分布式调试：
+
+- 全局配置conftest.py文件中启用function_remote_driver方法，在TestCases的每个子功能页面模块进行启用driver传参时，使用function_remote_driver方法
+
+~~~
+import pytest
+from PageObject.login_page import Login_page
+
+@pytest.fixture(scope="function")
+def login_page_class_load(function_remote_driver):
+    login_page = Login_page(function_remote_driver)
+    yield login_page
+~~~
+
+windows分布式调试：
+
+- 执行start_server_windows.bat脚本，启动selenium的hub和node节点
+- 启动脚本的两种方式
+  - 直接在pycharm编辑器执行run.py文件
+  - 执行start_run_all_browser.bat，启动三个浏览器进行测试（ps:IE需要进行浏览器设置，才可进行自动化脚本运行）
+  - 直接使用命令行传参，在terminal界面执行，python run.py firefox(默认使用chrome执行脚本，如果需要选择不同的浏览器，需要进行指定)
+
+---
+
+
+
+
+
+
+
